// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: schedule_service.proto

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScheduleService_GetSlot_FullMethodName                    = "/schedule.v1.ScheduleService/GetSlot"
	ScheduleService_CreateSlot_FullMethodName                 = "/schedule.v1.ScheduleService/CreateSlot"
	ScheduleService_UpdateSlot_FullMethodName                 = "/schedule.v1.ScheduleService/UpdateSlot"
	ScheduleService_DeleteSlot_FullMethodName                 = "/schedule.v1.ScheduleService/DeleteSlot"
	ScheduleService_ListSlotsByTutor_FullMethodName           = "/schedule.v1.ScheduleService/ListSlotsByTutor"
	ScheduleService_GetLesson_FullMethodName                  = "/schedule.v1.ScheduleService/GetLesson"
	ScheduleService_CreateLesson_FullMethodName               = "/schedule.v1.ScheduleService/CreateLesson"
	ScheduleService_UpdateLesson_FullMethodName               = "/schedule.v1.ScheduleService/UpdateLesson"
	ScheduleService_CancelLesson_FullMethodName               = "/schedule.v1.ScheduleService/CancelLesson"
	ScheduleService_MarkAsPaid_FullMethodName                 = "/schedule.v1.ScheduleService/MarkAsPaid"
	ScheduleService_ListLessonsByTutor_FullMethodName         = "/schedule.v1.ScheduleService/ListLessonsByTutor"
	ScheduleService_ListLessonsByStudent_FullMethodName       = "/schedule.v1.ScheduleService/ListLessonsByStudent"
	ScheduleService_ListLessonsByPair_FullMethodName          = "/schedule.v1.ScheduleService/ListLessonsByPair"
	ScheduleService_ListCompletedUnpaidLessons_FullMethodName = "/schedule.v1.ScheduleService/ListCompletedUnpaidLessons"
)

// ScheduleServiceClient is the client API for ScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleServiceClient interface {
	// --- SLOTS ---
	GetSlot(ctx context.Context, in *GetSlotRequest, opts ...grpc.CallOption) (*Slot, error)
	CreateSlot(ctx context.Context, in *CreateSlotRequest, opts ...grpc.CallOption) (*Slot, error)
	UpdateSlot(ctx context.Context, in *UpdateSlotRequest, opts ...grpc.CallOption) (*Slot, error)
	DeleteSlot(ctx context.Context, in *DeleteSlotRequest, opts ...grpc.CallOption) (*Empty, error)
	ListSlotsByTutor(ctx context.Context, in *ListSlotsByTutorRequest, opts ...grpc.CallOption) (*ListSlotsResponse, error)
	// --- LESSONS ---
	GetLesson(ctx context.Context, in *GetLessonRequest, opts ...grpc.CallOption) (*Lesson, error)
	CreateLesson(ctx context.Context, in *CreateLessonRequest, opts ...grpc.CallOption) (*Lesson, error)
	UpdateLesson(ctx context.Context, in *UpdateLessonRequest, opts ...grpc.CallOption) (*Lesson, error)
	CancelLesson(ctx context.Context, in *CancelLessonRequest, opts ...grpc.CallOption) (*Lesson, error)
	MarkAsPaid(ctx context.Context, in *MarkAsPaidRequest, opts ...grpc.CallOption) (*Lesson, error)
	ListLessonsByTutor(ctx context.Context, in *ListLessonsByTutorRequest, opts ...grpc.CallOption) (*ListLessonsResponse, error)
	ListLessonsByStudent(ctx context.Context, in *ListLessonsByStudentRequest, opts ...grpc.CallOption) (*ListLessonsResponse, error)
	ListLessonsByPair(ctx context.Context, in *ListLessonsByPairRequest, opts ...grpc.CallOption) (*ListLessonsResponse, error)
	// --- INTERNAL ---
	ListCompletedUnpaidLessons(ctx context.Context, in *ListCompletedUnpaidLessonsRequest, opts ...grpc.CallOption) (*ListLessonsResponse, error)
}

type scheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleServiceClient(cc grpc.ClientConnInterface) ScheduleServiceClient {
	return &scheduleServiceClient{cc}
}

func (c *scheduleServiceClient) GetSlot(ctx context.Context, in *GetSlotRequest, opts ...grpc.CallOption) (*Slot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Slot)
	err := c.cc.Invoke(ctx, ScheduleService_GetSlot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) CreateSlot(ctx context.Context, in *CreateSlotRequest, opts ...grpc.CallOption) (*Slot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Slot)
	err := c.cc.Invoke(ctx, ScheduleService_CreateSlot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) UpdateSlot(ctx context.Context, in *UpdateSlotRequest, opts ...grpc.CallOption) (*Slot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Slot)
	err := c.cc.Invoke(ctx, ScheduleService_UpdateSlot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) DeleteSlot(ctx context.Context, in *DeleteSlotRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ScheduleService_DeleteSlot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) ListSlotsByTutor(ctx context.Context, in *ListSlotsByTutorRequest, opts ...grpc.CallOption) (*ListSlotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSlotsResponse)
	err := c.cc.Invoke(ctx, ScheduleService_ListSlotsByTutor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) GetLesson(ctx context.Context, in *GetLessonRequest, opts ...grpc.CallOption) (*Lesson, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Lesson)
	err := c.cc.Invoke(ctx, ScheduleService_GetLesson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) CreateLesson(ctx context.Context, in *CreateLessonRequest, opts ...grpc.CallOption) (*Lesson, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Lesson)
	err := c.cc.Invoke(ctx, ScheduleService_CreateLesson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) UpdateLesson(ctx context.Context, in *UpdateLessonRequest, opts ...grpc.CallOption) (*Lesson, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Lesson)
	err := c.cc.Invoke(ctx, ScheduleService_UpdateLesson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) CancelLesson(ctx context.Context, in *CancelLessonRequest, opts ...grpc.CallOption) (*Lesson, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Lesson)
	err := c.cc.Invoke(ctx, ScheduleService_CancelLesson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) MarkAsPaid(ctx context.Context, in *MarkAsPaidRequest, opts ...grpc.CallOption) (*Lesson, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Lesson)
	err := c.cc.Invoke(ctx, ScheduleService_MarkAsPaid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) ListLessonsByTutor(ctx context.Context, in *ListLessonsByTutorRequest, opts ...grpc.CallOption) (*ListLessonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLessonsResponse)
	err := c.cc.Invoke(ctx, ScheduleService_ListLessonsByTutor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) ListLessonsByStudent(ctx context.Context, in *ListLessonsByStudentRequest, opts ...grpc.CallOption) (*ListLessonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLessonsResponse)
	err := c.cc.Invoke(ctx, ScheduleService_ListLessonsByStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) ListLessonsByPair(ctx context.Context, in *ListLessonsByPairRequest, opts ...grpc.CallOption) (*ListLessonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLessonsResponse)
	err := c.cc.Invoke(ctx, ScheduleService_ListLessonsByPair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) ListCompletedUnpaidLessons(ctx context.Context, in *ListCompletedUnpaidLessonsRequest, opts ...grpc.CallOption) (*ListLessonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLessonsResponse)
	err := c.cc.Invoke(ctx, ScheduleService_ListCompletedUnpaidLessons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleServiceServer is the server API for ScheduleService service.
// All implementations must embed UnimplementedScheduleServiceServer
// for forward compatibility.
type ScheduleServiceServer interface {
	// --- SLOTS ---
	GetSlot(context.Context, *GetSlotRequest) (*Slot, error)
	CreateSlot(context.Context, *CreateSlotRequest) (*Slot, error)
	UpdateSlot(context.Context, *UpdateSlotRequest) (*Slot, error)
	DeleteSlot(context.Context, *DeleteSlotRequest) (*Empty, error)
	ListSlotsByTutor(context.Context, *ListSlotsByTutorRequest) (*ListSlotsResponse, error)
	// --- LESSONS ---
	GetLesson(context.Context, *GetLessonRequest) (*Lesson, error)
	CreateLesson(context.Context, *CreateLessonRequest) (*Lesson, error)
	UpdateLesson(context.Context, *UpdateLessonRequest) (*Lesson, error)
	CancelLesson(context.Context, *CancelLessonRequest) (*Lesson, error)
	MarkAsPaid(context.Context, *MarkAsPaidRequest) (*Lesson, error)
	ListLessonsByTutor(context.Context, *ListLessonsByTutorRequest) (*ListLessonsResponse, error)
	ListLessonsByStudent(context.Context, *ListLessonsByStudentRequest) (*ListLessonsResponse, error)
	ListLessonsByPair(context.Context, *ListLessonsByPairRequest) (*ListLessonsResponse, error)
	// --- INTERNAL ---
	ListCompletedUnpaidLessons(context.Context, *ListCompletedUnpaidLessonsRequest) (*ListLessonsResponse, error)
	mustEmbedUnimplementedScheduleServiceServer()
}

// UnimplementedScheduleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScheduleServiceServer struct{}

func (UnimplementedScheduleServiceServer) GetSlot(context.Context, *GetSlotRequest) (*Slot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlot not implemented")
}
func (UnimplementedScheduleServiceServer) CreateSlot(context.Context, *CreateSlotRequest) (*Slot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSlot not implemented")
}
func (UnimplementedScheduleServiceServer) UpdateSlot(context.Context, *UpdateSlotRequest) (*Slot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSlot not implemented")
}
func (UnimplementedScheduleServiceServer) DeleteSlot(context.Context, *DeleteSlotRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSlot not implemented")
}
func (UnimplementedScheduleServiceServer) ListSlotsByTutor(context.Context, *ListSlotsByTutorRequest) (*ListSlotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSlotsByTutor not implemented")
}
func (UnimplementedScheduleServiceServer) GetLesson(context.Context, *GetLessonRequest) (*Lesson, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLesson not implemented")
}
func (UnimplementedScheduleServiceServer) CreateLesson(context.Context, *CreateLessonRequest) (*Lesson, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLesson not implemented")
}
func (UnimplementedScheduleServiceServer) UpdateLesson(context.Context, *UpdateLessonRequest) (*Lesson, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLesson not implemented")
}
func (UnimplementedScheduleServiceServer) CancelLesson(context.Context, *CancelLessonRequest) (*Lesson, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelLesson not implemented")
}
func (UnimplementedScheduleServiceServer) MarkAsPaid(context.Context, *MarkAsPaidRequest) (*Lesson, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsPaid not implemented")
}
func (UnimplementedScheduleServiceServer) ListLessonsByTutor(context.Context, *ListLessonsByTutorRequest) (*ListLessonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLessonsByTutor not implemented")
}
func (UnimplementedScheduleServiceServer) ListLessonsByStudent(context.Context, *ListLessonsByStudentRequest) (*ListLessonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLessonsByStudent not implemented")
}
func (UnimplementedScheduleServiceServer) ListLessonsByPair(context.Context, *ListLessonsByPairRequest) (*ListLessonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLessonsByPair not implemented")
}
func (UnimplementedScheduleServiceServer) ListCompletedUnpaidLessons(context.Context, *ListCompletedUnpaidLessonsRequest) (*ListLessonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompletedUnpaidLessons not implemented")
}
func (UnimplementedScheduleServiceServer) mustEmbedUnimplementedScheduleServiceServer() {}
func (UnimplementedScheduleServiceServer) testEmbeddedByValue()                         {}

// UnsafeScheduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleServiceServer will
// result in compilation errors.
type UnsafeScheduleServiceServer interface {
	mustEmbedUnimplementedScheduleServiceServer()
}

func RegisterScheduleServiceServer(s grpc.ServiceRegistrar, srv ScheduleServiceServer) {
	// If the following call pancis, it indicates UnimplementedScheduleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScheduleService_ServiceDesc, srv)
}

func _ScheduleService_GetSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).GetSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_GetSlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).GetSlot(ctx, req.(*GetSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_CreateSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).CreateSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_CreateSlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).CreateSlot(ctx, req.(*CreateSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_UpdateSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).UpdateSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_UpdateSlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).UpdateSlot(ctx, req.(*UpdateSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_DeleteSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).DeleteSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_DeleteSlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).DeleteSlot(ctx, req.(*DeleteSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_ListSlotsByTutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSlotsByTutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).ListSlotsByTutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_ListSlotsByTutor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).ListSlotsByTutor(ctx, req.(*ListSlotsByTutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_GetLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).GetLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_GetLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).GetLesson(ctx, req.(*GetLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_CreateLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).CreateLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_CreateLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).CreateLesson(ctx, req.(*CreateLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_UpdateLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).UpdateLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_UpdateLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).UpdateLesson(ctx, req.(*UpdateLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_CancelLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).CancelLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_CancelLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).CancelLesson(ctx, req.(*CancelLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_MarkAsPaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAsPaidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).MarkAsPaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_MarkAsPaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).MarkAsPaid(ctx, req.(*MarkAsPaidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_ListLessonsByTutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLessonsByTutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).ListLessonsByTutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_ListLessonsByTutor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).ListLessonsByTutor(ctx, req.(*ListLessonsByTutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_ListLessonsByStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLessonsByStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).ListLessonsByStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_ListLessonsByStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).ListLessonsByStudent(ctx, req.(*ListLessonsByStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_ListLessonsByPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLessonsByPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).ListLessonsByPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_ListLessonsByPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).ListLessonsByPair(ctx, req.(*ListLessonsByPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_ListCompletedUnpaidLessons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompletedUnpaidLessonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).ListCompletedUnpaidLessons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_ListCompletedUnpaidLessons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).ListCompletedUnpaidLessons(ctx, req.(*ListCompletedUnpaidLessonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduleService_ServiceDesc is the grpc.ServiceDesc for ScheduleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schedule.v1.ScheduleService",
	HandlerType: (*ScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSlot",
			Handler:    _ScheduleService_GetSlot_Handler,
		},
		{
			MethodName: "CreateSlot",
			Handler:    _ScheduleService_CreateSlot_Handler,
		},
		{
			MethodName: "UpdateSlot",
			Handler:    _ScheduleService_UpdateSlot_Handler,
		},
		{
			MethodName: "DeleteSlot",
			Handler:    _ScheduleService_DeleteSlot_Handler,
		},
		{
			MethodName: "ListSlotsByTutor",
			Handler:    _ScheduleService_ListSlotsByTutor_Handler,
		},
		{
			MethodName: "GetLesson",
			Handler:    _ScheduleService_GetLesson_Handler,
		},
		{
			MethodName: "CreateLesson",
			Handler:    _ScheduleService_CreateLesson_Handler,
		},
		{
			MethodName: "UpdateLesson",
			Handler:    _ScheduleService_UpdateLesson_Handler,
		},
		{
			MethodName: "CancelLesson",
			Handler:    _ScheduleService_CancelLesson_Handler,
		},
		{
			MethodName: "MarkAsPaid",
			Handler:    _ScheduleService_MarkAsPaid_Handler,
		},
		{
			MethodName: "ListLessonsByTutor",
			Handler:    _ScheduleService_ListLessonsByTutor_Handler,
		},
		{
			MethodName: "ListLessonsByStudent",
			Handler:    _ScheduleService_ListLessonsByStudent_Handler,
		},
		{
			MethodName: "ListLessonsByPair",
			Handler:    _ScheduleService_ListLessonsByPair_Handler,
		},
		{
			MethodName: "ListCompletedUnpaidLessons",
			Handler:    _ScheduleService_ListCompletedUnpaidLessons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedule_service.proto",
}
