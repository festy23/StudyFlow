// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: homework_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HomeworkService_CreateAssignment_FullMethodName            = "/homework.v1.HomeworkService/CreateAssignment"
	HomeworkService_UpdateAssignment_FullMethodName            = "/homework.v1.HomeworkService/UpdateAssignment"
	HomeworkService_DeleteAssignment_FullMethodName            = "/homework.v1.HomeworkService/DeleteAssignment"
	HomeworkService_ListAssignmentsByTutor_FullMethodName      = "/homework.v1.HomeworkService/ListAssignmentsByTutor"
	HomeworkService_ListAssignmentsByStudent_FullMethodName    = "/homework.v1.HomeworkService/ListAssignmentsByStudent"
	HomeworkService_ListAssignmentsByPair_FullMethodName       = "/homework.v1.HomeworkService/ListAssignmentsByPair"
	HomeworkService_CreateSubmission_FullMethodName            = "/homework.v1.HomeworkService/CreateSubmission"
	HomeworkService_ListSubmissionsByAssignment_FullMethodName = "/homework.v1.HomeworkService/ListSubmissionsByAssignment"
	HomeworkService_CreateFeedback_FullMethodName              = "/homework.v1.HomeworkService/CreateFeedback"
	HomeworkService_UpdateFeedback_FullMethodName              = "/homework.v1.HomeworkService/UpdateFeedback"
	HomeworkService_ListFeedbacksByAssignment_FullMethodName   = "/homework.v1.HomeworkService/ListFeedbacksByAssignment"
	HomeworkService_GetAssignmentFile_FullMethodName           = "/homework.v1.HomeworkService/GetAssignmentFile"
	HomeworkService_GetSubmissionFile_FullMethodName           = "/homework.v1.HomeworkService/GetSubmissionFile"
	HomeworkService_GetFeedbackFile_FullMethodName             = "/homework.v1.HomeworkService/GetFeedbackFile"
)

// HomeworkServiceClient is the client API for HomeworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeworkServiceClient interface {
	// --- ASSIGNMENT ---
	CreateAssignment(ctx context.Context, in *CreateAssignmentRequest, opts ...grpc.CallOption) (*Assignment, error)
	UpdateAssignment(ctx context.Context, in *UpdateAssignmentRequest, opts ...grpc.CallOption) (*Assignment, error)
	DeleteAssignment(ctx context.Context, in *DeleteAssignmentRequest, opts ...grpc.CallOption) (*Empty, error)
	ListAssignmentsByTutor(ctx context.Context, in *ListAssignmentsByTutorRequest, opts ...grpc.CallOption) (*ListAssignmentsResponse, error)
	ListAssignmentsByStudent(ctx context.Context, in *ListAssignmentsByStudentRequest, opts ...grpc.CallOption) (*ListAssignmentsResponse, error)
	ListAssignmentsByPair(ctx context.Context, in *ListAssignmentsByPairRequest, opts ...grpc.CallOption) (*ListAssignmentsResponse, error)
	// --- SUBMISSION ---
	CreateSubmission(ctx context.Context, in *CreateSubmissionRequest, opts ...grpc.CallOption) (*Submission, error)
	ListSubmissionsByAssignment(ctx context.Context, in *ListSubmissionsByAssignmentRequest, opts ...grpc.CallOption) (*ListSubmissionsResponse, error)
	// --- FEEDBACK ---
	CreateFeedback(ctx context.Context, in *CreateFeedbackRequest, opts ...grpc.CallOption) (*Feedback, error)
	UpdateFeedback(ctx context.Context, in *UpdateFeedbackRequest, opts ...grpc.CallOption) (*Feedback, error)
	ListFeedbacksByAssignment(ctx context.Context, in *ListFeedbacksByAssignmentRequest, opts ...grpc.CallOption) (*ListFeedbacksResponse, error)
	// --- FILES ---
	GetAssignmentFile(ctx context.Context, in *GetAssignmentFileRequest, opts ...grpc.CallOption) (*HomeworkFileURL, error)
	GetSubmissionFile(ctx context.Context, in *GetSubmissionFileRequest, opts ...grpc.CallOption) (*HomeworkFileURL, error)
	GetFeedbackFile(ctx context.Context, in *GetFeedbackFileRequest, opts ...grpc.CallOption) (*HomeworkFileURL, error)
}

type homeworkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeworkServiceClient(cc grpc.ClientConnInterface) HomeworkServiceClient {
	return &homeworkServiceClient{cc}
}

func (c *homeworkServiceClient) CreateAssignment(ctx context.Context, in *CreateAssignmentRequest, opts ...grpc.CallOption) (*Assignment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Assignment)
	err := c.cc.Invoke(ctx, HomeworkService_CreateAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkServiceClient) UpdateAssignment(ctx context.Context, in *UpdateAssignmentRequest, opts ...grpc.CallOption) (*Assignment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Assignment)
	err := c.cc.Invoke(ctx, HomeworkService_UpdateAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkServiceClient) DeleteAssignment(ctx context.Context, in *DeleteAssignmentRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, HomeworkService_DeleteAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkServiceClient) ListAssignmentsByTutor(ctx context.Context, in *ListAssignmentsByTutorRequest, opts ...grpc.CallOption) (*ListAssignmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAssignmentsResponse)
	err := c.cc.Invoke(ctx, HomeworkService_ListAssignmentsByTutor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkServiceClient) ListAssignmentsByStudent(ctx context.Context, in *ListAssignmentsByStudentRequest, opts ...grpc.CallOption) (*ListAssignmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAssignmentsResponse)
	err := c.cc.Invoke(ctx, HomeworkService_ListAssignmentsByStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkServiceClient) ListAssignmentsByPair(ctx context.Context, in *ListAssignmentsByPairRequest, opts ...grpc.CallOption) (*ListAssignmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAssignmentsResponse)
	err := c.cc.Invoke(ctx, HomeworkService_ListAssignmentsByPair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkServiceClient) CreateSubmission(ctx context.Context, in *CreateSubmissionRequest, opts ...grpc.CallOption) (*Submission, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Submission)
	err := c.cc.Invoke(ctx, HomeworkService_CreateSubmission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkServiceClient) ListSubmissionsByAssignment(ctx context.Context, in *ListSubmissionsByAssignmentRequest, opts ...grpc.CallOption) (*ListSubmissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSubmissionsResponse)
	err := c.cc.Invoke(ctx, HomeworkService_ListSubmissionsByAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkServiceClient) CreateFeedback(ctx context.Context, in *CreateFeedbackRequest, opts ...grpc.CallOption) (*Feedback, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Feedback)
	err := c.cc.Invoke(ctx, HomeworkService_CreateFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkServiceClient) UpdateFeedback(ctx context.Context, in *UpdateFeedbackRequest, opts ...grpc.CallOption) (*Feedback, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Feedback)
	err := c.cc.Invoke(ctx, HomeworkService_UpdateFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkServiceClient) ListFeedbacksByAssignment(ctx context.Context, in *ListFeedbacksByAssignmentRequest, opts ...grpc.CallOption) (*ListFeedbacksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeedbacksResponse)
	err := c.cc.Invoke(ctx, HomeworkService_ListFeedbacksByAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkServiceClient) GetAssignmentFile(ctx context.Context, in *GetAssignmentFileRequest, opts ...grpc.CallOption) (*HomeworkFileURL, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HomeworkFileURL)
	err := c.cc.Invoke(ctx, HomeworkService_GetAssignmentFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkServiceClient) GetSubmissionFile(ctx context.Context, in *GetSubmissionFileRequest, opts ...grpc.CallOption) (*HomeworkFileURL, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HomeworkFileURL)
	err := c.cc.Invoke(ctx, HomeworkService_GetSubmissionFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkServiceClient) GetFeedbackFile(ctx context.Context, in *GetFeedbackFileRequest, opts ...grpc.CallOption) (*HomeworkFileURL, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HomeworkFileURL)
	err := c.cc.Invoke(ctx, HomeworkService_GetFeedbackFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeworkServiceServer is the server API for HomeworkService service.
// All implementations must embed UnimplementedHomeworkServiceServer
// for forward compatibility.
type HomeworkServiceServer interface {
	// --- ASSIGNMENT ---
	CreateAssignment(context.Context, *CreateAssignmentRequest) (*Assignment, error)
	UpdateAssignment(context.Context, *UpdateAssignmentRequest) (*Assignment, error)
	DeleteAssignment(context.Context, *DeleteAssignmentRequest) (*Empty, error)
	ListAssignmentsByTutor(context.Context, *ListAssignmentsByTutorRequest) (*ListAssignmentsResponse, error)
	ListAssignmentsByStudent(context.Context, *ListAssignmentsByStudentRequest) (*ListAssignmentsResponse, error)
	ListAssignmentsByPair(context.Context, *ListAssignmentsByPairRequest) (*ListAssignmentsResponse, error)
	// --- SUBMISSION ---
	CreateSubmission(context.Context, *CreateSubmissionRequest) (*Submission, error)
	ListSubmissionsByAssignment(context.Context, *ListSubmissionsByAssignmentRequest) (*ListSubmissionsResponse, error)
	// --- FEEDBACK ---
	CreateFeedback(context.Context, *CreateFeedbackRequest) (*Feedback, error)
	UpdateFeedback(context.Context, *UpdateFeedbackRequest) (*Feedback, error)
	ListFeedbacksByAssignment(context.Context, *ListFeedbacksByAssignmentRequest) (*ListFeedbacksResponse, error)
	// --- FILES ---
	GetAssignmentFile(context.Context, *GetAssignmentFileRequest) (*HomeworkFileURL, error)
	GetSubmissionFile(context.Context, *GetSubmissionFileRequest) (*HomeworkFileURL, error)
	GetFeedbackFile(context.Context, *GetFeedbackFileRequest) (*HomeworkFileURL, error)
	mustEmbedUnimplementedHomeworkServiceServer()
}

// UnimplementedHomeworkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHomeworkServiceServer struct{}

func (UnimplementedHomeworkServiceServer) CreateAssignment(context.Context, *CreateAssignmentRequest) (*Assignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssignment not implemented")
}
func (UnimplementedHomeworkServiceServer) UpdateAssignment(context.Context, *UpdateAssignmentRequest) (*Assignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssignment not implemented")
}
func (UnimplementedHomeworkServiceServer) DeleteAssignment(context.Context, *DeleteAssignmentRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssignment not implemented")
}
func (UnimplementedHomeworkServiceServer) ListAssignmentsByTutor(context.Context, *ListAssignmentsByTutorRequest) (*ListAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssignmentsByTutor not implemented")
}
func (UnimplementedHomeworkServiceServer) ListAssignmentsByStudent(context.Context, *ListAssignmentsByStudentRequest) (*ListAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssignmentsByStudent not implemented")
}
func (UnimplementedHomeworkServiceServer) ListAssignmentsByPair(context.Context, *ListAssignmentsByPairRequest) (*ListAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssignmentsByPair not implemented")
}
func (UnimplementedHomeworkServiceServer) CreateSubmission(context.Context, *CreateSubmissionRequest) (*Submission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubmission not implemented")
}
func (UnimplementedHomeworkServiceServer) ListSubmissionsByAssignment(context.Context, *ListSubmissionsByAssignmentRequest) (*ListSubmissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubmissionsByAssignment not implemented")
}
func (UnimplementedHomeworkServiceServer) CreateFeedback(context.Context, *CreateFeedbackRequest) (*Feedback, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedback not implemented")
}
func (UnimplementedHomeworkServiceServer) UpdateFeedback(context.Context, *UpdateFeedbackRequest) (*Feedback, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedback not implemented")
}
func (UnimplementedHomeworkServiceServer) ListFeedbacksByAssignment(context.Context, *ListFeedbacksByAssignmentRequest) (*ListFeedbacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedbacksByAssignment not implemented")
}
func (UnimplementedHomeworkServiceServer) GetAssignmentFile(context.Context, *GetAssignmentFileRequest) (*HomeworkFileURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignmentFile not implemented")
}
func (UnimplementedHomeworkServiceServer) GetSubmissionFile(context.Context, *GetSubmissionFileRequest) (*HomeworkFileURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionFile not implemented")
}
func (UnimplementedHomeworkServiceServer) GetFeedbackFile(context.Context, *GetFeedbackFileRequest) (*HomeworkFileURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedbackFile not implemented")
}
func (UnimplementedHomeworkServiceServer) mustEmbedUnimplementedHomeworkServiceServer() {}
func (UnimplementedHomeworkServiceServer) testEmbeddedByValue()                         {}

// UnsafeHomeworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeworkServiceServer will
// result in compilation errors.
type UnsafeHomeworkServiceServer interface {
	mustEmbedUnimplementedHomeworkServiceServer()
}

func RegisterHomeworkServiceServer(s grpc.ServiceRegistrar, srv HomeworkServiceServer) {
	// If the following call pancis, it indicates UnimplementedHomeworkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HomeworkService_ServiceDesc, srv)
}

func _HomeworkService_CreateAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).CreateAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_CreateAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).CreateAssignment(ctx, req.(*CreateAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeworkService_UpdateAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).UpdateAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_UpdateAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).UpdateAssignment(ctx, req.(*UpdateAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeworkService_DeleteAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).DeleteAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_DeleteAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).DeleteAssignment(ctx, req.(*DeleteAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeworkService_ListAssignmentsByTutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssignmentsByTutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).ListAssignmentsByTutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_ListAssignmentsByTutor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).ListAssignmentsByTutor(ctx, req.(*ListAssignmentsByTutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeworkService_ListAssignmentsByStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssignmentsByStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).ListAssignmentsByStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_ListAssignmentsByStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).ListAssignmentsByStudent(ctx, req.(*ListAssignmentsByStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeworkService_ListAssignmentsByPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssignmentsByPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).ListAssignmentsByPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_ListAssignmentsByPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).ListAssignmentsByPair(ctx, req.(*ListAssignmentsByPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeworkService_CreateSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).CreateSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_CreateSubmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).CreateSubmission(ctx, req.(*CreateSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeworkService_ListSubmissionsByAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubmissionsByAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).ListSubmissionsByAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_ListSubmissionsByAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).ListSubmissionsByAssignment(ctx, req.(*ListSubmissionsByAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeworkService_CreateFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).CreateFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_CreateFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).CreateFeedback(ctx, req.(*CreateFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeworkService_UpdateFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).UpdateFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_UpdateFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).UpdateFeedback(ctx, req.(*UpdateFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeworkService_ListFeedbacksByAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedbacksByAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).ListFeedbacksByAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_ListFeedbacksByAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).ListFeedbacksByAssignment(ctx, req.(*ListFeedbacksByAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeworkService_GetAssignmentFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignmentFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).GetAssignmentFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_GetAssignmentFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).GetAssignmentFile(ctx, req.(*GetAssignmentFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeworkService_GetSubmissionFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmissionFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).GetSubmissionFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_GetSubmissionFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).GetSubmissionFile(ctx, req.(*GetSubmissionFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeworkService_GetFeedbackFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedbackFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).GetFeedbackFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_GetFeedbackFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).GetFeedbackFile(ctx, req.(*GetFeedbackFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HomeworkService_ServiceDesc is the grpc.ServiceDesc for HomeworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "homework.v1.HomeworkService",
	HandlerType: (*HomeworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAssignment",
			Handler:    _HomeworkService_CreateAssignment_Handler,
		},
		{
			MethodName: "UpdateAssignment",
			Handler:    _HomeworkService_UpdateAssignment_Handler,
		},
		{
			MethodName: "DeleteAssignment",
			Handler:    _HomeworkService_DeleteAssignment_Handler,
		},
		{
			MethodName: "ListAssignmentsByTutor",
			Handler:    _HomeworkService_ListAssignmentsByTutor_Handler,
		},
		{
			MethodName: "ListAssignmentsByStudent",
			Handler:    _HomeworkService_ListAssignmentsByStudent_Handler,
		},
		{
			MethodName: "ListAssignmentsByPair",
			Handler:    _HomeworkService_ListAssignmentsByPair_Handler,
		},
		{
			MethodName: "CreateSubmission",
			Handler:    _HomeworkService_CreateSubmission_Handler,
		},
		{
			MethodName: "ListSubmissionsByAssignment",
			Handler:    _HomeworkService_ListSubmissionsByAssignment_Handler,
		},
		{
			MethodName: "CreateFeedback",
			Handler:    _HomeworkService_CreateFeedback_Handler,
		},
		{
			MethodName: "UpdateFeedback",
			Handler:    _HomeworkService_UpdateFeedback_Handler,
		},
		{
			MethodName: "ListFeedbacksByAssignment",
			Handler:    _HomeworkService_ListFeedbacksByAssignment_Handler,
		},
		{
			MethodName: "GetAssignmentFile",
			Handler:    _HomeworkService_GetAssignmentFile_Handler,
		},
		{
			MethodName: "GetSubmissionFile",
			Handler:    _HomeworkService_GetSubmissionFile_Handler,
		},
		{
			MethodName: "GetFeedbackFile",
			Handler:    _HomeworkService_GetFeedbackFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "homework_service.proto",
}
