syntax = "proto3";

package user.v1;

import "google/protobuf/timestamp.proto";


service UserService {
	// Регистрация по Telegram (authorization_header)
	rpc RegisterViaTelegram(RegisterViaTelegramRequest) returns (User);

	// Получить текущего пользователя по authorization_header
	rpc GetMe(GetMeRequest) returns (User);

	// CRUD: Users
	rpc GetUser(GetUserRequest) returns (User);
	rpc CreateUser(User) returns (User);
	rpc UpdateUser(User) returns (User);
	rpc DeleteUser(DeleteUserRequest) returns (Empty);

	// CRUD: TelegramAccounts
	rpc GetTelegramAccount(GetTelegramAccountRequest) returns (TelegramAccount);
	rpc CreateTelegramAccount(TelegramAccount) returns (TelegramAccount);
	rpc DeleteTelegramAccount(DeleteTelegramAccountRequest) returns (Empty);

	// CRUD: TutorProfiles
	rpc CreateTutorProfile(TutorProfile) returns (TutorProfile);
	rpc UpdateTutorProfile(TutorProfile) returns (TutorProfile);

	// По user_id
	rpc GetTutorProfileByUserId(GetTutorProfileByUserIdRequest) returns (TutorProfile);
	rpc DeleteTutorProfileByUserId(DeleteTutorProfileByUserIdRequest) returns (Empty);

	// CRUD: TutorStudents
	rpc GetTutorStudent(GetTutorStudentRequest) returns (TutorStudent);
	rpc CreateTutorStudent(TutorStudent) returns (TutorStudent);
	rpc UpdateTutorStudent(TutorStudent) returns (TutorStudent);
	rpc DeleteTutorStudent(DeleteTutorStudentRequest) returns (Empty);

	// Списки
	rpc ListTutorStudents(ListTutorStudentsRequest) returns (ListTutorStudentsResponse);
	rpc ListTutorsForStudent(ListTutorsForStudentRequest) returns (ListTutorsForStudentResponse);

	// Получение параметров взаимодействия между репетитором и учеником
	rpc ResolveTutorStudentContext(ResolveTutorStudentContextRequest) returns (ResolvedTutorStudentContext);
}

// ==== STRUCTS ====

message RegisterViaTelegramRequest {
	string authorization_header = 1;
}

message GetMeRequest {
	string authorization_header = 1;
}

message GetUserRequest {
	string id = 1;
}

message DeleteUserRequest {
	string id = 1;
}

message GetTelegramAccountRequest {
	string id = 1;
}

message DeleteTelegramAccountRequest {
	string id = 1;
}

message GetTutorProfileByUserIdRequest {
	string user_id = 1;
}

message DeleteTutorProfileByUserIdRequest {
	string user_id = 1;
}

message GetTutorStudentRequest {
	string id = 1;
}

message DeleteTutorStudentRequest {
	string id = 1;
}

message ListTutorStudentsRequest {
	string tutor_id = 1;
}

message ListTutorStudentsResponse {
	repeated TutorStudent students = 1;
}

message ListTutorsForStudentRequest {
	string student_id = 1;
}

message ListTutorsForStudentResponse {
	repeated TutorStudent tutors = 1;
}

message ResolveTutorStudentContextRequest {
	string tutor_id = 1;
	string student_id = 2;
}

message ResolvedTutorStudentContext {
	bool relationship_exists = 1;
	string relationship_status = 2; // invited / active / blocked / removed

	int32 lesson_price_rub = 3;
	string lesson_connection_link = 4;
	string payment_info = 5;
}

message Empty {}

message User {
	string id = 1;
	string role = 2; // tutor / student
	string auth_provider = 3;
	string status = 4; // active / blocked / deleted
	string first_name = 5;
	string last_name = 6;
	string timezone = 7;
	google.protobuf.Timestamp created_at = 8;
	google.protobuf.Timestamp edited_at = 9;
}

message TelegramAccount {
	string id = 1;
	string user_id = 2;
	int64 telegram_id = 3;
	string username = 4;
	google.protobuf.Timestamp created_at = 5;
}

message TutorProfile {
	string id = 1;
	string user_id = 2;
	string payment_info = 3;
	int32 lesson_price_rub = 4;
	string lesson_connection_link = 5;
	google.protobuf.Timestamp created_at = 6;
	google.protobuf.Timestamp edited_at = 7;
}

message TutorStudent {
	string id = 1;
	string tutor_id = 2;
	string student_id = 3;
	int32 lesson_price_rub = 4;
	string lesson_connection_link = 5;
	string status = 6; // invited / active / blocked / removed
	google.protobuf.Timestamp created_at = 7;
	google.protobuf.Timestamp edited_at = 8;
}
