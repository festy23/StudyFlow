// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: user_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_RegisterViaTelegram_FullMethodName        = "/user.v1.UserService/RegisterViaTelegram"
	UserService_AuthorizeByAuthHeader_FullMethodName      = "/user.v1.UserService/AuthorizeByAuthHeader"
	UserService_GetMe_FullMethodName                      = "/user.v1.UserService/GetMe"
	UserService_GetUser_FullMethodName                    = "/user.v1.UserService/GetUser"
	UserService_UpdateUser_FullMethodName                 = "/user.v1.UserService/UpdateUser"
	UserService_UpdateTutorProfile_FullMethodName         = "/user.v1.UserService/UpdateTutorProfile"
	UserService_GetTutorProfileByUserId_FullMethodName    = "/user.v1.UserService/GetTutorProfileByUserId"
	UserService_GetTutorStudent_FullMethodName            = "/user.v1.UserService/GetTutorStudent"
	UserService_CreateTutorStudent_FullMethodName         = "/user.v1.UserService/CreateTutorStudent"
	UserService_UpdateTutorStudent_FullMethodName         = "/user.v1.UserService/UpdateTutorStudent"
	UserService_DeleteTutorStudent_FullMethodName         = "/user.v1.UserService/DeleteTutorStudent"
	UserService_ListTutorStudents_FullMethodName          = "/user.v1.UserService/ListTutorStudents"
	UserService_ListTutorsForStudent_FullMethodName       = "/user.v1.UserService/ListTutorsForStudent"
	UserService_ResolveTutorStudentContext_FullMethodName = "/user.v1.UserService/ResolveTutorStudentContext"
	UserService_AcceptInvitationFromTutor_FullMethodName  = "/user.v1.UserService/AcceptInvitationFromTutor"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	RegisterViaTelegram(ctx context.Context, in *RegisterViaTelegramRequest, opts ...grpc.CallOption) (*User, error)
	AuthorizeByAuthHeader(ctx context.Context, in *AuthorizeByAuthHeaderRequest, opts ...grpc.CallOption) (*User, error)
	GetMe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserPublic, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error)
	UpdateTutorProfile(ctx context.Context, in *TutorProfile, opts ...grpc.CallOption) (*TutorProfile, error)
	GetTutorProfileByUserId(ctx context.Context, in *GetTutorProfileByUserIdRequest, opts ...grpc.CallOption) (*TutorProfile, error)
	GetTutorStudent(ctx context.Context, in *GetTutorStudentRequest, opts ...grpc.CallOption) (*TutorStudent, error)
	CreateTutorStudent(ctx context.Context, in *CreateTutorStudentRequest, opts ...grpc.CallOption) (*TutorStudent, error)
	UpdateTutorStudent(ctx context.Context, in *UpdateTutorStudentRequest, opts ...grpc.CallOption) (*TutorStudent, error)
	DeleteTutorStudent(ctx context.Context, in *DeleteTutorStudentRequest, opts ...grpc.CallOption) (*Empty, error)
	ListTutorStudents(ctx context.Context, in *ListTutorStudentsRequest, opts ...grpc.CallOption) (*ListTutorStudentsResponse, error)
	ListTutorsForStudent(ctx context.Context, in *ListTutorsForStudentRequest, opts ...grpc.CallOption) (*ListTutorsForStudentResponse, error)
	ResolveTutorStudentContext(ctx context.Context, in *ResolveTutorStudentContextRequest, opts ...grpc.CallOption) (*ResolvedTutorStudentContext, error)
	AcceptInvitationFromTutor(ctx context.Context, in *AcceptInvitationFromTutorRequest, opts ...grpc.CallOption) (*Empty, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) RegisterViaTelegram(ctx context.Context, in *RegisterViaTelegramRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_RegisterViaTelegram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AuthorizeByAuthHeader(ctx context.Context, in *AuthorizeByAuthHeaderRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_AuthorizeByAuthHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetMe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_GetMe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserPublic, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserPublic)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateTutorProfile(ctx context.Context, in *TutorProfile, opts ...grpc.CallOption) (*TutorProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TutorProfile)
	err := c.cc.Invoke(ctx, UserService_UpdateTutorProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetTutorProfileByUserId(ctx context.Context, in *GetTutorProfileByUserIdRequest, opts ...grpc.CallOption) (*TutorProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TutorProfile)
	err := c.cc.Invoke(ctx, UserService_GetTutorProfileByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetTutorStudent(ctx context.Context, in *GetTutorStudentRequest, opts ...grpc.CallOption) (*TutorStudent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TutorStudent)
	err := c.cc.Invoke(ctx, UserService_GetTutorStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateTutorStudent(ctx context.Context, in *CreateTutorStudentRequest, opts ...grpc.CallOption) (*TutorStudent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TutorStudent)
	err := c.cc.Invoke(ctx, UserService_CreateTutorStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateTutorStudent(ctx context.Context, in *UpdateTutorStudentRequest, opts ...grpc.CallOption) (*TutorStudent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TutorStudent)
	err := c.cc.Invoke(ctx, UserService_UpdateTutorStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteTutorStudent(ctx context.Context, in *DeleteTutorStudentRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserService_DeleteTutorStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListTutorStudents(ctx context.Context, in *ListTutorStudentsRequest, opts ...grpc.CallOption) (*ListTutorStudentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTutorStudentsResponse)
	err := c.cc.Invoke(ctx, UserService_ListTutorStudents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListTutorsForStudent(ctx context.Context, in *ListTutorsForStudentRequest, opts ...grpc.CallOption) (*ListTutorsForStudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTutorsForStudentResponse)
	err := c.cc.Invoke(ctx, UserService_ListTutorsForStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResolveTutorStudentContext(ctx context.Context, in *ResolveTutorStudentContextRequest, opts ...grpc.CallOption) (*ResolvedTutorStudentContext, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolvedTutorStudentContext)
	err := c.cc.Invoke(ctx, UserService_ResolveTutorStudentContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AcceptInvitationFromTutor(ctx context.Context, in *AcceptInvitationFromTutorRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserService_AcceptInvitationFromTutor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	RegisterViaTelegram(context.Context, *RegisterViaTelegramRequest) (*User, error)
	AuthorizeByAuthHeader(context.Context, *AuthorizeByAuthHeaderRequest) (*User, error)
	GetMe(context.Context, *Empty) (*User, error)
	GetUser(context.Context, *GetUserRequest) (*UserPublic, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*User, error)
	UpdateTutorProfile(context.Context, *TutorProfile) (*TutorProfile, error)
	GetTutorProfileByUserId(context.Context, *GetTutorProfileByUserIdRequest) (*TutorProfile, error)
	GetTutorStudent(context.Context, *GetTutorStudentRequest) (*TutorStudent, error)
	CreateTutorStudent(context.Context, *CreateTutorStudentRequest) (*TutorStudent, error)
	UpdateTutorStudent(context.Context, *UpdateTutorStudentRequest) (*TutorStudent, error)
	DeleteTutorStudent(context.Context, *DeleteTutorStudentRequest) (*Empty, error)
	ListTutorStudents(context.Context, *ListTutorStudentsRequest) (*ListTutorStudentsResponse, error)
	ListTutorsForStudent(context.Context, *ListTutorsForStudentRequest) (*ListTutorsForStudentResponse, error)
	ResolveTutorStudentContext(context.Context, *ResolveTutorStudentContextRequest) (*ResolvedTutorStudentContext, error)
	AcceptInvitationFromTutor(context.Context, *AcceptInvitationFromTutorRequest) (*Empty, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) RegisterViaTelegram(context.Context, *RegisterViaTelegramRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterViaTelegram not implemented")
}
func (UnimplementedUserServiceServer) AuthorizeByAuthHeader(context.Context, *AuthorizeByAuthHeaderRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeByAuthHeader not implemented")
}
func (UnimplementedUserServiceServer) GetMe(context.Context, *Empty) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMe not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*UserPublic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateTutorProfile(context.Context, *TutorProfile) (*TutorProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTutorProfile not implemented")
}
func (UnimplementedUserServiceServer) GetTutorProfileByUserId(context.Context, *GetTutorProfileByUserIdRequest) (*TutorProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTutorProfileByUserId not implemented")
}
func (UnimplementedUserServiceServer) GetTutorStudent(context.Context, *GetTutorStudentRequest) (*TutorStudent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTutorStudent not implemented")
}
func (UnimplementedUserServiceServer) CreateTutorStudent(context.Context, *CreateTutorStudentRequest) (*TutorStudent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTutorStudent not implemented")
}
func (UnimplementedUserServiceServer) UpdateTutorStudent(context.Context, *UpdateTutorStudentRequest) (*TutorStudent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTutorStudent not implemented")
}
func (UnimplementedUserServiceServer) DeleteTutorStudent(context.Context, *DeleteTutorStudentRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTutorStudent not implemented")
}
func (UnimplementedUserServiceServer) ListTutorStudents(context.Context, *ListTutorStudentsRequest) (*ListTutorStudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTutorStudents not implemented")
}
func (UnimplementedUserServiceServer) ListTutorsForStudent(context.Context, *ListTutorsForStudentRequest) (*ListTutorsForStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTutorsForStudent not implemented")
}
func (UnimplementedUserServiceServer) ResolveTutorStudentContext(context.Context, *ResolveTutorStudentContextRequest) (*ResolvedTutorStudentContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveTutorStudentContext not implemented")
}
func (UnimplementedUserServiceServer) AcceptInvitationFromTutor(context.Context, *AcceptInvitationFromTutorRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitationFromTutor not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_RegisterViaTelegram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterViaTelegramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterViaTelegram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RegisterViaTelegram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterViaTelegram(ctx, req.(*RegisterViaTelegramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AuthorizeByAuthHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeByAuthHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AuthorizeByAuthHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AuthorizeByAuthHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AuthorizeByAuthHeader(ctx, req.(*AuthorizeByAuthHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetMe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetMe(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateTutorProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TutorProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateTutorProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateTutorProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateTutorProfile(ctx, req.(*TutorProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetTutorProfileByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTutorProfileByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetTutorProfileByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetTutorProfileByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetTutorProfileByUserId(ctx, req.(*GetTutorProfileByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetTutorStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTutorStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetTutorStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetTutorStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetTutorStudent(ctx, req.(*GetTutorStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateTutorStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTutorStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateTutorStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateTutorStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateTutorStudent(ctx, req.(*CreateTutorStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateTutorStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTutorStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateTutorStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateTutorStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateTutorStudent(ctx, req.(*UpdateTutorStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteTutorStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTutorStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteTutorStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteTutorStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteTutorStudent(ctx, req.(*DeleteTutorStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListTutorStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTutorStudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListTutorStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListTutorStudents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListTutorStudents(ctx, req.(*ListTutorStudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListTutorsForStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTutorsForStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListTutorsForStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListTutorsForStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListTutorsForStudent(ctx, req.(*ListTutorsForStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResolveTutorStudentContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveTutorStudentContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResolveTutorStudentContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResolveTutorStudentContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResolveTutorStudentContext(ctx, req.(*ResolveTutorStudentContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AcceptInvitationFromTutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvitationFromTutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AcceptInvitationFromTutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AcceptInvitationFromTutor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AcceptInvitationFromTutor(ctx, req.(*AcceptInvitationFromTutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterViaTelegram",
			Handler:    _UserService_RegisterViaTelegram_Handler,
		},
		{
			MethodName: "AuthorizeByAuthHeader",
			Handler:    _UserService_AuthorizeByAuthHeader_Handler,
		},
		{
			MethodName: "GetMe",
			Handler:    _UserService_GetMe_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateTutorProfile",
			Handler:    _UserService_UpdateTutorProfile_Handler,
		},
		{
			MethodName: "GetTutorProfileByUserId",
			Handler:    _UserService_GetTutorProfileByUserId_Handler,
		},
		{
			MethodName: "GetTutorStudent",
			Handler:    _UserService_GetTutorStudent_Handler,
		},
		{
			MethodName: "CreateTutorStudent",
			Handler:    _UserService_CreateTutorStudent_Handler,
		},
		{
			MethodName: "UpdateTutorStudent",
			Handler:    _UserService_UpdateTutorStudent_Handler,
		},
		{
			MethodName: "DeleteTutorStudent",
			Handler:    _UserService_DeleteTutorStudent_Handler,
		},
		{
			MethodName: "ListTutorStudents",
			Handler:    _UserService_ListTutorStudents_Handler,
		},
		{
			MethodName: "ListTutorsForStudent",
			Handler:    _UserService_ListTutorsForStudent_Handler,
		},
		{
			MethodName: "ResolveTutorStudentContext",
			Handler:    _UserService_ResolveTutorStudentContext_Handler,
		},
		{
			MethodName: "AcceptInvitationFromTutor",
			Handler:    _UserService_AcceptInvitationFromTutor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_service.proto",
}
