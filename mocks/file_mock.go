// Code generated by MockGen. DO NOT EDIT.
// Source: fileservice/pkg/api (interfaces: FileServiceClient)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../mocks/file_mock.go fileservice/pkg/api FileServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	api "/fileservice/pkg/api"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFileServiceClient is a mock of FileServiceClient interface.
type MockFileServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceClientMockRecorder
	isgomock struct{}
}

// MockFileServiceClientMockRecorder is the mock recorder for MockFileServiceClient.
type MockFileServiceClientMockRecorder struct {
	mock *MockFileServiceClient
}

// NewMockFileServiceClient creates a new mock instance.
func NewMockFileServiceClient(ctrl *gomock.Controller) *MockFileServiceClient {
	mock := &MockFileServiceClient{ctrl: ctrl}
	mock.recorder = &MockFileServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileServiceClient) EXPECT() *MockFileServiceClientMockRecorder {
	return m.recorder
}

// GenerateDownloadURL mocks base method.
func (m *MockFileServiceClient) GenerateDownloadURL(ctx context.Context, in *api.GenerateDownloadURLRequest, opts ...grpc.CallOption) (*api.DownloadURL, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateDownloadURL", varargs...)
	ret0, _ := ret[0].(*api.DownloadURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateDownloadURL indicates an expected call of GenerateDownloadURL.
func (mr *MockFileServiceClientMockRecorder) GenerateDownloadURL(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDownloadURL", reflect.TypeOf((*MockFileServiceClient)(nil).GenerateDownloadURL), varargs...)
}

// GetFileMeta mocks base method.
func (m *MockFileServiceClient) GetFileMeta(ctx context.Context, in *api.GetFileMetaRequest, opts ...grpc.CallOption) (*api.File, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFileMeta", varargs...)
	ret0, _ := ret[0].(*api.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileMeta indicates an expected call of GetFileMeta.
func (mr *MockFileServiceClientMockRecorder) GetFileMeta(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileMeta", reflect.TypeOf((*MockFileServiceClient)(nil).GetFileMeta), varargs...)
}

// InitUpload mocks base method.
func (m *MockFileServiceClient) InitUpload(ctx context.Context, in *api.InitUploadRequest, opts ...grpc.CallOption) (*api.InitUploadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitUpload", varargs...)
	ret0, _ := ret[0].(*api.InitUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitUpload indicates an expected call of InitUpload.
func (mr *MockFileServiceClientMockRecorder) InitUpload(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitUpload", reflect.TypeOf((*MockFileServiceClient)(nil).InitUpload), varargs...)
}
