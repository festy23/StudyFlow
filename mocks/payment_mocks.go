// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=../mocks/payment_service_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "paymentservice/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPaymentService is a mock of PaymentService interface.
type MockPaymentService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceMockRecorder
	isgomock struct{}
}

// MockPaymentServiceMockRecorder is the mock recorder for MockPaymentService.
type MockPaymentServiceMockRecorder struct {
	mock *MockPaymentService
}

// NewMockPaymentService creates a new mock instance.
func NewMockPaymentService(ctrl *gomock.Controller) *MockPaymentService {
	mock := &MockPaymentService{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentService) EXPECT() *MockPaymentServiceMockRecorder {
	return m.recorder
}

// GetPaymentInfo mocks base method.
func (m *MockPaymentService) GetPaymentInfo(ctx context.Context, input *models.GetPaymentInfoInput) (*models.PaymentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentInfo", ctx, input)
	ret0, _ := ret[0].(*models.PaymentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentInfo indicates an expected call of GetPaymentInfo.
func (mr *MockPaymentServiceMockRecorder) GetPaymentInfo(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentInfo", reflect.TypeOf((*MockPaymentService)(nil).GetPaymentInfo), ctx, input)
}

// GetReceipt mocks base method.
func (m *MockPaymentService) GetReceipt(ctx context.Context, input *models.GetReceiptInput) (*models.PaymentReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceipt", ctx, input)
	ret0, _ := ret[0].(*models.PaymentReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceipt indicates an expected call of GetReceipt.
func (mr *MockPaymentServiceMockRecorder) GetReceipt(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceipt", reflect.TypeOf((*MockPaymentService)(nil).GetReceipt), ctx, input)
}

// GetReceiptFile mocks base method.
func (m *MockPaymentService) GetReceiptFile(ctx context.Context, input *models.GetReceiptFileInput) (*models.ReceiptFileUrl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiptFile", ctx, input)
	ret0, _ := ret[0].(*models.ReceiptFileUrl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceiptFile indicates an expected call of GetReceiptFile.
func (mr *MockPaymentServiceMockRecorder) GetReceiptFile(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiptFile", reflect.TypeOf((*MockPaymentService)(nil).GetReceiptFile), ctx, input)
}

// SubmitPaymentReceipt mocks base method.
func (m *MockPaymentService) SubmitPaymentReceipt(ctx context.Context, input *models.SubmitPaymentReceiptInput) (*models.PaymentReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitPaymentReceipt", ctx, input)
	ret0, _ := ret[0].(*models.PaymentReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitPaymentReceipt indicates an expected call of SubmitPaymentReceipt.
func (mr *MockPaymentServiceMockRecorder) SubmitPaymentReceipt(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitPaymentReceipt", reflect.TypeOf((*MockPaymentService)(nil).SubmitPaymentReceipt), ctx, input)
}

// VerifyReceipt mocks base method.
func (m *MockPaymentService) VerifyReceipt(ctx context.Context, input *models.VerifyReceipt) (*models.PaymentReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyReceipt", ctx, input)
	ret0, _ := ret[0].(*models.PaymentReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyReceipt indicates an expected call of VerifyReceipt.
func (mr *MockPaymentServiceMockRecorder) VerifyReceipt(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyReceipt", reflect.TypeOf((*MockPaymentService)(nil).VerifyReceipt), ctx, input)
}
