// Code generated by MockGen. DO NOT EDIT.
// Source: userservice/pkg/api (interfaces: UserServiceClient)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../mocks/user_mock.go userservice/pkg/api UserServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	api "userservice/pkg/api"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserServiceClient is a mock of UserServiceClient interface.
type MockUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientMockRecorder
	isgomock struct{}
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient.
type MockUserServiceClientMockRecorder struct {
	mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance.
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
	mock := &MockUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
	return m.recorder
}

// AcceptInvitationFromTutor mocks base method.
func (m *MockUserServiceClient) AcceptInvitationFromTutor(ctx context.Context, in *api.AcceptInvitationFromTutorRequest, opts ...grpc.CallOption) (*api.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptInvitationFromTutor", varargs...)
	ret0, _ := ret[0].(*api.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptInvitationFromTutor indicates an expected call of AcceptInvitationFromTutor.
func (mr *MockUserServiceClientMockRecorder) AcceptInvitationFromTutor(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitationFromTutor", reflect.TypeOf((*MockUserServiceClient)(nil).AcceptInvitationFromTutor), varargs...)
}

// AuthorizeByAuthHeader mocks base method.
func (m *MockUserServiceClient) AuthorizeByAuthHeader(ctx context.Context, in *api.AuthorizeByAuthHeaderRequest, opts ...grpc.CallOption) (*api.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthorizeByAuthHeader", varargs...)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizeByAuthHeader indicates an expected call of AuthorizeByAuthHeader.
func (mr *MockUserServiceClientMockRecorder) AuthorizeByAuthHeader(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeByAuthHeader", reflect.TypeOf((*MockUserServiceClient)(nil).AuthorizeByAuthHeader), varargs...)
}

// CreateTutorStudent mocks base method.
func (m *MockUserServiceClient) CreateTutorStudent(ctx context.Context, in *api.CreateTutorStudentRequest, opts ...grpc.CallOption) (*api.TutorStudent, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTutorStudent", varargs...)
	ret0, _ := ret[0].(*api.TutorStudent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTutorStudent indicates an expected call of CreateTutorStudent.
func (mr *MockUserServiceClientMockRecorder) CreateTutorStudent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTutorStudent", reflect.TypeOf((*MockUserServiceClient)(nil).CreateTutorStudent), varargs...)
}

// DeleteTutorStudent mocks base method.
func (m *MockUserServiceClient) DeleteTutorStudent(ctx context.Context, in *api.DeleteTutorStudentRequest, opts ...grpc.CallOption) (*api.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTutorStudent", varargs...)
	ret0, _ := ret[0].(*api.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTutorStudent indicates an expected call of DeleteTutorStudent.
func (mr *MockUserServiceClientMockRecorder) DeleteTutorStudent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTutorStudent", reflect.TypeOf((*MockUserServiceClient)(nil).DeleteTutorStudent), varargs...)
}

// GetMe mocks base method.
func (m *MockUserServiceClient) GetMe(ctx context.Context, in *api.Empty, opts ...grpc.CallOption) (*api.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMe", varargs...)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMe indicates an expected call of GetMe.
func (mr *MockUserServiceClientMockRecorder) GetMe(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMe", reflect.TypeOf((*MockUserServiceClient)(nil).GetMe), varargs...)
}

// GetTutorProfileByUserId mocks base method.
func (m *MockUserServiceClient) GetTutorProfileByUserId(ctx context.Context, in *api.GetTutorProfileByUserIdRequest, opts ...grpc.CallOption) (*api.TutorProfile, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTutorProfileByUserId", varargs...)
	ret0, _ := ret[0].(*api.TutorProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTutorProfileByUserId indicates an expected call of GetTutorProfileByUserId.
func (mr *MockUserServiceClientMockRecorder) GetTutorProfileByUserId(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTutorProfileByUserId", reflect.TypeOf((*MockUserServiceClient)(nil).GetTutorProfileByUserId), varargs...)
}

// GetTutorStudent mocks base method.
func (m *MockUserServiceClient) GetTutorStudent(ctx context.Context, in *api.GetTutorStudentRequest, opts ...grpc.CallOption) (*api.TutorStudent, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTutorStudent", varargs...)
	ret0, _ := ret[0].(*api.TutorStudent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTutorStudent indicates an expected call of GetTutorStudent.
func (mr *MockUserServiceClientMockRecorder) GetTutorStudent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTutorStudent", reflect.TypeOf((*MockUserServiceClient)(nil).GetTutorStudent), varargs...)
}

// GetUser mocks base method.
func (m *MockUserServiceClient) GetUser(ctx context.Context, in *api.GetUserRequest, opts ...grpc.CallOption) (*api.UserPublic, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*api.UserPublic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceClientMockRecorder) GetUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServiceClient)(nil).GetUser), varargs...)
}

// ListTutorStudents mocks base method.
func (m *MockUserServiceClient) ListTutorStudents(ctx context.Context, in *api.ListTutorStudentsRequest, opts ...grpc.CallOption) (*api.ListTutorStudentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTutorStudents", varargs...)
	ret0, _ := ret[0].(*api.ListTutorStudentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTutorStudents indicates an expected call of ListTutorStudents.
func (mr *MockUserServiceClientMockRecorder) ListTutorStudents(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTutorStudents", reflect.TypeOf((*MockUserServiceClient)(nil).ListTutorStudents), varargs...)
}

// ListTutorsForStudent mocks base method.
func (m *MockUserServiceClient) ListTutorsForStudent(ctx context.Context, in *api.ListTutorsForStudentRequest, opts ...grpc.CallOption) (*api.ListTutorsForStudentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTutorsForStudent", varargs...)
	ret0, _ := ret[0].(*api.ListTutorsForStudentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTutorsForStudent indicates an expected call of ListTutorsForStudent.
func (mr *MockUserServiceClientMockRecorder) ListTutorsForStudent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTutorsForStudent", reflect.TypeOf((*MockUserServiceClient)(nil).ListTutorsForStudent), varargs...)
}

// RegisterViaTelegram mocks base method.
func (m *MockUserServiceClient) RegisterViaTelegram(ctx context.Context, in *api.RegisterViaTelegramRequest, opts ...grpc.CallOption) (*api.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterViaTelegram", varargs...)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterViaTelegram indicates an expected call of RegisterViaTelegram.
func (mr *MockUserServiceClientMockRecorder) RegisterViaTelegram(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterViaTelegram", reflect.TypeOf((*MockUserServiceClient)(nil).RegisterViaTelegram), varargs...)
}

// ResolveTutorStudentContext mocks base method.
func (m *MockUserServiceClient) ResolveTutorStudentContext(ctx context.Context, in *api.ResolveTutorStudentContextRequest, opts ...grpc.CallOption) (*api.ResolvedTutorStudentContext, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResolveTutorStudentContext", varargs...)
	ret0, _ := ret[0].(*api.ResolvedTutorStudentContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveTutorStudentContext indicates an expected call of ResolveTutorStudentContext.
func (mr *MockUserServiceClientMockRecorder) ResolveTutorStudentContext(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveTutorStudentContext", reflect.TypeOf((*MockUserServiceClient)(nil).ResolveTutorStudentContext), varargs...)
}

// UpdateTutorProfile mocks base method.
func (m *MockUserServiceClient) UpdateTutorProfile(ctx context.Context, in *api.UpdateTutorProfileRequest, opts ...grpc.CallOption) (*api.TutorProfile, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTutorProfile", varargs...)
	ret0, _ := ret[0].(*api.TutorProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTutorProfile indicates an expected call of UpdateTutorProfile.
func (mr *MockUserServiceClientMockRecorder) UpdateTutorProfile(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTutorProfile", reflect.TypeOf((*MockUserServiceClient)(nil).UpdateTutorProfile), varargs...)
}

// UpdateTutorStudent mocks base method.
func (m *MockUserServiceClient) UpdateTutorStudent(ctx context.Context, in *api.UpdateTutorStudentRequest, opts ...grpc.CallOption) (*api.TutorStudent, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTutorStudent", varargs...)
	ret0, _ := ret[0].(*api.TutorStudent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTutorStudent indicates an expected call of UpdateTutorStudent.
func (mr *MockUserServiceClientMockRecorder) UpdateTutorStudent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTutorStudent", reflect.TypeOf((*MockUserServiceClient)(nil).UpdateTutorStudent), varargs...)
}

// UpdateUser mocks base method.
func (m *MockUserServiceClient) UpdateUser(ctx context.Context, in *api.UpdateUserRequest, opts ...grpc.CallOption) (*api.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUser", varargs...)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceClientMockRecorder) UpdateUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserServiceClient)(nil).UpdateUser), varargs...)
}
