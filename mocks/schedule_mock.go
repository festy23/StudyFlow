// Code generated by MockGen. DO NOT EDIT.
// Source: schedule_service/pkg/api (interfaces: ScheduleServiceClient)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../mocks/schedule_mock.go schedule_service/pkg/api ScheduleServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	api "schedule_service/pkg/api"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockScheduleServiceClient is a mock of ScheduleServiceClient interface.
type MockScheduleServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockScheduleServiceClientMockRecorder
	isgomock struct{}
}

// MockScheduleServiceClientMockRecorder is the mock recorder for MockScheduleServiceClient.
type MockScheduleServiceClientMockRecorder struct {
	mock *MockScheduleServiceClient
}

// NewMockScheduleServiceClient creates a new mock instance.
func NewMockScheduleServiceClient(ctrl *gomock.Controller) *MockScheduleServiceClient {
	mock := &MockScheduleServiceClient{ctrl: ctrl}
	mock.recorder = &MockScheduleServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduleServiceClient) EXPECT() *MockScheduleServiceClientMockRecorder {
	return m.recorder
}

// CancelLesson mocks base method.
func (m *MockScheduleServiceClient) CancelLesson(ctx context.Context, in *api.CancelLessonRequest, opts ...grpc.CallOption) (*api.Lesson, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelLesson", varargs...)
	ret0, _ := ret[0].(*api.Lesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelLesson indicates an expected call of CancelLesson.
func (mr *MockScheduleServiceClientMockRecorder) CancelLesson(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelLesson", reflect.TypeOf((*MockScheduleServiceClient)(nil).CancelLesson), varargs...)
}

// CreateLesson mocks base method.
func (m *MockScheduleServiceClient) CreateLesson(ctx context.Context, in *api.CreateLessonRequest, opts ...grpc.CallOption) (*api.Lesson, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLesson", varargs...)
	ret0, _ := ret[0].(*api.Lesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLesson indicates an expected call of CreateLesson.
func (mr *MockScheduleServiceClientMockRecorder) CreateLesson(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLesson", reflect.TypeOf((*MockScheduleServiceClient)(nil).CreateLesson), varargs...)
}

// CreateSlot mocks base method.
func (m *MockScheduleServiceClient) CreateSlot(ctx context.Context, in *api.CreateSlotRequest, opts ...grpc.CallOption) (*api.Slot, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSlot", varargs...)
	ret0, _ := ret[0].(*api.Slot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSlot indicates an expected call of CreateSlot.
func (mr *MockScheduleServiceClientMockRecorder) CreateSlot(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlot", reflect.TypeOf((*MockScheduleServiceClient)(nil).CreateSlot), varargs...)
}

// DeleteSlot mocks base method.
func (m *MockScheduleServiceClient) DeleteSlot(ctx context.Context, in *api.DeleteSlotRequest, opts ...grpc.CallOption) (*api.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSlot", varargs...)
	ret0, _ := ret[0].(*api.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSlot indicates an expected call of DeleteSlot.
func (mr *MockScheduleServiceClientMockRecorder) DeleteSlot(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlot", reflect.TypeOf((*MockScheduleServiceClient)(nil).DeleteSlot), varargs...)
}

// GetLesson mocks base method.
func (m *MockScheduleServiceClient) GetLesson(ctx context.Context, in *api.GetLessonRequest, opts ...grpc.CallOption) (*api.Lesson, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLesson", varargs...)
	ret0, _ := ret[0].(*api.Lesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLesson indicates an expected call of GetLesson.
func (mr *MockScheduleServiceClientMockRecorder) GetLesson(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLesson", reflect.TypeOf((*MockScheduleServiceClient)(nil).GetLesson), varargs...)
}

// GetSlot mocks base method.
func (m *MockScheduleServiceClient) GetSlot(ctx context.Context, in *api.GetSlotRequest, opts ...grpc.CallOption) (*api.Slot, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSlot", varargs...)
	ret0, _ := ret[0].(*api.Slot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlot indicates an expected call of GetSlot.
func (mr *MockScheduleServiceClientMockRecorder) GetSlot(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlot", reflect.TypeOf((*MockScheduleServiceClient)(nil).GetSlot), varargs...)
}

// ListCompletedUnpaidLessons mocks base method.
func (m *MockScheduleServiceClient) ListCompletedUnpaidLessons(ctx context.Context, in *api.ListCompletedUnpaidLessonsRequest, opts ...grpc.CallOption) (*api.ListLessonsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCompletedUnpaidLessons", varargs...)
	ret0, _ := ret[0].(*api.ListLessonsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompletedUnpaidLessons indicates an expected call of ListCompletedUnpaidLessons.
func (mr *MockScheduleServiceClientMockRecorder) ListCompletedUnpaidLessons(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompletedUnpaidLessons", reflect.TypeOf((*MockScheduleServiceClient)(nil).ListCompletedUnpaidLessons), varargs...)
}

// ListLessonsByPair mocks base method.
func (m *MockScheduleServiceClient) ListLessonsByPair(ctx context.Context, in *api.ListLessonsByPairRequest, opts ...grpc.CallOption) (*api.ListLessonsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLessonsByPair", varargs...)
	ret0, _ := ret[0].(*api.ListLessonsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLessonsByPair indicates an expected call of ListLessonsByPair.
func (mr *MockScheduleServiceClientMockRecorder) ListLessonsByPair(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLessonsByPair", reflect.TypeOf((*MockScheduleServiceClient)(nil).ListLessonsByPair), varargs...)
}

// ListLessonsByStudent mocks base method.
func (m *MockScheduleServiceClient) ListLessonsByStudent(ctx context.Context, in *api.ListLessonsByStudentRequest, opts ...grpc.CallOption) (*api.ListLessonsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLessonsByStudent", varargs...)
	ret0, _ := ret[0].(*api.ListLessonsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLessonsByStudent indicates an expected call of ListLessonsByStudent.
func (mr *MockScheduleServiceClientMockRecorder) ListLessonsByStudent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLessonsByStudent", reflect.TypeOf((*MockScheduleServiceClient)(nil).ListLessonsByStudent), varargs...)
}

// ListLessonsByTutor mocks base method.
func (m *MockScheduleServiceClient) ListLessonsByTutor(ctx context.Context, in *api.ListLessonsByTutorRequest, opts ...grpc.CallOption) (*api.ListLessonsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLessonsByTutor", varargs...)
	ret0, _ := ret[0].(*api.ListLessonsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLessonsByTutor indicates an expected call of ListLessonsByTutor.
func (mr *MockScheduleServiceClientMockRecorder) ListLessonsByTutor(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLessonsByTutor", reflect.TypeOf((*MockScheduleServiceClient)(nil).ListLessonsByTutor), varargs...)
}

// ListSlotsByTutor mocks base method.
func (m *MockScheduleServiceClient) ListSlotsByTutor(ctx context.Context, in *api.ListSlotsByTutorRequest, opts ...grpc.CallOption) (*api.ListSlotsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSlotsByTutor", varargs...)
	ret0, _ := ret[0].(*api.ListSlotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSlotsByTutor indicates an expected call of ListSlotsByTutor.
func (mr *MockScheduleServiceClientMockRecorder) ListSlotsByTutor(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlotsByTutor", reflect.TypeOf((*MockScheduleServiceClient)(nil).ListSlotsByTutor), varargs...)
}

// UpdateLesson mocks base method.
func (m *MockScheduleServiceClient) UpdateLesson(ctx context.Context, in *api.UpdateLessonRequest, opts ...grpc.CallOption) (*api.Lesson, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLesson", varargs...)
	ret0, _ := ret[0].(*api.Lesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLesson indicates an expected call of UpdateLesson.
func (mr *MockScheduleServiceClientMockRecorder) UpdateLesson(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLesson", reflect.TypeOf((*MockScheduleServiceClient)(nil).UpdateLesson), varargs...)
}

// UpdateSlot mocks base method.
func (m *MockScheduleServiceClient) UpdateSlot(ctx context.Context, in *api.UpdateSlotRequest, opts ...grpc.CallOption) (*api.Slot, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSlot", varargs...)
	ret0, _ := ret[0].(*api.Slot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSlot indicates an expected call of UpdateSlot.
func (mr *MockScheduleServiceClientMockRecorder) UpdateSlot(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlot", reflect.TypeOf((*MockScheduleServiceClient)(nil).UpdateSlot), varargs...)
}
