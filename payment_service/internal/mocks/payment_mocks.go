// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=../mocks/payment_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "paymentservice/internal/models"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIPaymentRepo is a mock of IPaymentRepo interface.
type MockIPaymentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIPaymentRepoMockRecorder
	isgomock struct{}
}

// MockIPaymentRepoMockRecorder is the mock recorder for MockIPaymentRepo.
type MockIPaymentRepoMockRecorder struct {
	mock *MockIPaymentRepo
}

// NewMockIPaymentRepo creates a new mock instance.
func NewMockIPaymentRepo(ctrl *gomock.Controller) *MockIPaymentRepo {
	mock := &MockIPaymentRepo{ctrl: ctrl}
	mock.recorder = &MockIPaymentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPaymentRepo) EXPECT() *MockIPaymentRepoMockRecorder {
	return m.recorder
}

// CreateReceipt mocks base method.
func (m *MockIPaymentRepo) CreateReceipt(ctx context.Context, receipt *models.PaymentReceiptCreateInput) (*models.PaymentReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReceipt", ctx, receipt)
	ret0, _ := ret[0].(*models.PaymentReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReceipt indicates an expected call of CreateReceipt.
func (mr *MockIPaymentRepoMockRecorder) CreateReceipt(ctx, receipt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReceipt", reflect.TypeOf((*MockIPaymentRepo)(nil).CreateReceipt), ctx, receipt)
}

// ExistsByID mocks base method.
func (m *MockIPaymentRepo) ExistsByID(ctx context.Context, id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByID", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByID indicates an expected call of ExistsByID.
func (mr *MockIPaymentRepoMockRecorder) ExistsByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByID", reflect.TypeOf((*MockIPaymentRepo)(nil).ExistsByID), ctx, id)
}

// GetReceiptByID mocks base method.
func (m *MockIPaymentRepo) GetReceiptByID(ctx context.Context, id uuid.UUID) (*models.PaymentReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiptByID", ctx, id)
	ret0, _ := ret[0].(*models.PaymentReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceiptByID indicates an expected call of GetReceiptByID.
func (mr *MockIPaymentRepoMockRecorder) GetReceiptByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiptByID", reflect.TypeOf((*MockIPaymentRepo)(nil).GetReceiptByID), ctx, id)
}

// GetReceiptByLessonID mocks base method.
func (m *MockIPaymentRepo) GetReceiptByLessonID(ctx context.Context, lessonID uuid.UUID) (*models.PaymentReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiptByLessonID", ctx, lessonID)
	ret0, _ := ret[0].(*models.PaymentReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceiptByLessonID indicates an expected call of GetReceiptByLessonID.
func (mr *MockIPaymentRepoMockRecorder) GetReceiptByLessonID(ctx, lessonID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiptByLessonID", reflect.TypeOf((*MockIPaymentRepo)(nil).GetReceiptByLessonID), ctx, lessonID)
}

// UpdateReceipt mocks base method.
func (m *MockIPaymentRepo) UpdateReceipt(ctx context.Context, id uuid.UUID, isVerified bool) (*models.PaymentReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReceipt", ctx, id, isVerified)
	ret0, _ := ret[0].(*models.PaymentReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReceipt indicates an expected call of UpdateReceipt.
func (mr *MockIPaymentRepoMockRecorder) UpdateReceipt(ctx, id, isVerified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReceipt", reflect.TypeOf((*MockIPaymentRepo)(nil).UpdateReceipt), ctx, id, isVerified)
}
